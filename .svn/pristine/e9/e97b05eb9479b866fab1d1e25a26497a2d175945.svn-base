package com.kivi.dashboard.aspect;

import java.util.Enumeration;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang3.StringUtils;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.kivi.dashboard.shiro.ShiroKit;
import com.kivi.dashboard.shiro.ShiroUser;
import com.kivi.dashboard.shiro.form.LoginForm;
import com.kivi.dashboard.sys.entity.SysLog;
import com.kivi.dashboard.sys.entity.SysLogEx;
import com.kivi.dashboard.sys.service.ISysDicService;
import com.kivi.dashboard.sys.service.ISysLogService;
import com.kivi.framework.model.ResultMap;
import com.kivi.framework.util.kit.CollectionKit;
import com.kivi.framework.web.util.kit.HttpKit;
import com.vip.vjtools.vjkit.time.ClockUtil;

import lombok.extern.slf4j.Slf4j;

/**
 * @description AOP 日志
 */
@Aspect
@Component
@Slf4j
public class SysLogAspect {

	@Autowired
	private ISysDicService			sysDicService;

	@Autowired
	private ISysLogService			logService;

	private ThreadLocal<SysLogEx>	sysLogExs	= new ThreadLocal<>();

	// @Pointcut("within(@org.springframework.stereotype.Controller *)")
	@Pointcut("within(@org.springframework.web.bind.annotation.RestController *)")
	public void cutController() {

	}

	@Before("cutController()")
	public void doBefore(JoinPoint joinPoint) {
		if (log.isTraceEnabled()) {
			HttpServletRequest	request	= HttpKit.getRequest();
			String				method	= request.getMethod();
			Object[]			args	= joinPoint.getArgs();

			log.trace("ip={}\r\nurl={}\r\nmethod={}\r\nclass_method={}\r\nargs={}",
					// ip
					HttpKit.getRemoteAddress(request),
					// URL
					request.getRequestURL(),
					// method
					method,
					// 类方法
					StringUtils.joinWith(".", joinPoint.getSignature().getDeclaringTypeName(),
							joinPoint.getSignature().getName()),
					// 参数
					args);
		}
	}

	@Around("cutController()")
	public Object recordSysLog(ProceedingJoinPoint point) throws Throwable {
		SysLogEx sysLogEx = new SysLogEx();
		sysLogExs.set(sysLogEx);
		String methodName = point.getSignature().getName();
		sysLogEx.getSysLog().setMethod(methodName);
		sysLogEx.getSysLog().setClassName(point.getTarget().getClass().getName());
		Object[] params = point.getArgs();

		if (StringUtils.equals("login", methodName) && CollectionKit.isNotEmpty(params)) {
			Object obj = params[0];
			if (obj instanceof LoginForm) {
				LoginForm loginForm = (LoginForm) params[0];
				sysLogEx.getSysLog().setLoginName(loginForm.getUsername());
			}
		}

		StringBuffer		bfParams	= new StringBuffer();
		Enumeration<String>	paraNames	= null;
		HttpServletRequest	request		= null;
		if (params != null && params.length > 0) {
			request		= ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
			paraNames	= request.getParameterNames();
			String	key;
			String	value;
			while (paraNames.hasMoreElements()) {
				key		= paraNames.nextElement();
				value	= request.getParameter(key);
				bfParams.append(key).append("=").append(value).append("&");
			}
			if (StringUtils.isBlank(bfParams)) {
				String qstring = request.getQueryString();
				bfParams.append(qstring == null ? "" : qstring);
			}
			sysLogEx.getSysLog().setParams(bfParams == null ? null : bfParams.toString());
			sysLogEx.getSysLog().setClientIp(HttpKit.getRemoteAddress(request));
		}

		return point.proceed();
	}

	@AfterThrowing(throwing = "ex", pointcut = "cutController()")
	public void doAfterThrowing(Throwable ex) {
		log.error("Controller执行异常", ex);
		writeLog(ResultMap.error(ex.getMessage()), sysLogExs.get());
	}

	@AfterReturning(returning = "object", pointcut = "cutController()")
	public void doAfterReturning(JoinPoint joinPoint, Object object) {
		if (object != null) {
			log.info("response={}", object.toString());
		} else {
			log.info("response=");
		}

		writeLog(object, sysLogExs.get());

	}

	@After("cutController()")
	public void doAfter() {
		SysLogEx	sysLogEx	= sysLogExs.get();
		long		totalMillis	= ClockUtil.elapsedTime(sysLogEx.getStartTime());
		sysLogEx.setTotalMillis(totalMillis);
		log.info("----执行时间：{}毫秒----", totalMillis);
	}

	private Boolean writeLog(Object object, SysLogEx sysLogEx) {
		SysLog sysLog = sysLogEx.getSysLog();
		sysLog.setType(1);

		if (isWriteLog(sysLog.getMethod())) {
			try {
				ShiroUser shiroUser = ShiroKit.getUser();
				if (null != shiroUser) {
					String loginName = shiroUser.getLoginName();
					sysLog.setLoginName(loginName);
					sysLog.setRoleName(shiroUser.getRoles().get(0));
				}

				if (object instanceof ResultMap) {
					ResultMap resultMap = (ResultMap) object;
					sysLog.setResult(resultMap.msg());
				}

				sysLog.setOperation(operation(sysLog.getClassName(), sysLog.getMethod()));
				sysLog.setTime(sysLogEx.getTotalMillis());
				logService.save(sysLog);

			} catch (Exception e) {
				log.error(e.getMessage(), e);
				return false;
			}
		}
		return true;
	}

	private boolean isWriteLog(String method) {
		String[] pattern = { "login", "logout", "save", "update", "delete", "list", "page", "edit", "grant" };

		return StringUtils.containsAny(method, pattern);
	}

	String operation(String... vars) {
		StringBuilder builder = new StringBuilder();

		if (vars != null) {
			for (String var : vars) {
				String name = sysDicService.getDic(var);
				if (name != null)
					builder.append(name);
			}
		}

		return builder.toString();
	}

}
